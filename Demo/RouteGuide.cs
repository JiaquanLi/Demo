// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_guide.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Routeguide {

  /// <summary>Holder for reflection information generated from route_guide.proto</summary>
  public static partial class RouteGuideReflection {

    #region Descriptor
    /// <summary>File descriptor for route_guide.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RouteGuideReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFyb3V0ZV9ndWlkZS5wcm90bxIKcm91dGVndWlkZSIrCglSb3V0ZU5vdGUS",
            "EAoIZGF0YXNlbmQYASABKAwSDAoEc2l6ZRgCIAEoBSI0ChJUZW1wbGV0Rmls",
            "ZVJlcXVlc3QSEAoIZGF0YXNlbmQYASABKAwSDAoEc2l6ZRgCIAEoBSIiChBU",
            "ZW1wbGV0RmlsZVJlcGx5Eg4KBnJldHN0cxgBIAEoCCIwChdJY3BNYXhJdGVy",
            "YXRpb25zUmVxdWVzdBIVCg1tYXhpdGVyYXRpb25zGAEgASgFIicKFUljcE1h",
            "eEl0ZXJhdGlvbnNSZXBseRIOCgZyZXRzdHMYASABKAgiSgoPU2VydmVySW5m",
            "b1JlcGx5Eg8KB3JldnNpb24YASABKAkSEQoJYnVpbGRkYXRlGAIgASgJEhMK",
            "C2NvbXBsYXluYW1lGAMgASgJIiQKEVNlcnZlckluZm9SZXF1ZXN0Eg8KB21l",
            "c3NhZ2UYASABKAkiNAoQTGlzZW5jZUluZm9SZXBseRIPCgdtZXNzYWdlGAEg",
            "ASgJEg8KB3N0YXR1ZXMYAiABKAgiKwoSTGlzZW5jZUluZm9SZXF1ZXN0EhUK",
            "DWNsaWVudExpY2Vuc2UYASABKAkyngMKClJvdXRlR3VpZGUSPwoJUm91dGVD",
            "aGF0EhUucm91dGVndWlkZS5Sb3V0ZU5vdGUaFS5yb3V0ZWd1aWRlLlJvdXRl",
            "Tm90ZSIAKAEwARJRCg1TZXRJY3BUZW1wbGV0Eh4ucm91dGVndWlkZS5UZW1w",
            "bGV0RmlsZVJlcXVlc3QaHC5yb3V0ZWd1aWRlLlRlbXBsZXRGaWxlUmVwbHki",
            "ACgBEl8KE1NldEljcE1heEl0ZXJhdGlvbnMSIy5yb3V0ZWd1aWRlLkljcE1h",
            "eEl0ZXJhdGlvbnNSZXF1ZXN0GiEucm91dGVndWlkZS5JY3BNYXhJdGVyYXRp",
            "b25zUmVwbHkiABJLCgtDaGVja1NlcnZlchIdLnJvdXRlZ3VpZGUuU2VydmVy",
            "SW5mb1JlcXVlc3QaGy5yb3V0ZWd1aWRlLlNlcnZlckluZm9SZXBseSIAEk4K",
            "DENoZWNrTGlzZW5jZRIeLnJvdXRlZ3VpZGUuTGlzZW5jZUluZm9SZXF1ZXN0",
            "Ghwucm91dGVndWlkZS5MaXNlbmNlSW5mb1JlcGx5IgBCNgobaW8uZ3JwYy5l",
            "eGFtcGxlcy5yb3V0ZWd1aWRlQg9Sb3V0ZUd1aWRlUHJvdG9QAaICA1JUR2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.RouteNote), global::Routeguide.RouteNote.Parser, new[]{ "Datasend", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.TempletFileRequest), global::Routeguide.TempletFileRequest.Parser, new[]{ "Datasend", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.TempletFileReply), global::Routeguide.TempletFileReply.Parser, new[]{ "Retsts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.IcpMaxIterationsRequest), global::Routeguide.IcpMaxIterationsRequest.Parser, new[]{ "Maxiterations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.IcpMaxIterationsReply), global::Routeguide.IcpMaxIterationsReply.Parser, new[]{ "Retsts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.ServerInfoReply), global::Routeguide.ServerInfoReply.Parser, new[]{ "Revsion", "Builddate", "Complayname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.ServerInfoRequest), global::Routeguide.ServerInfoRequest.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.LisenceInfoReply), global::Routeguide.LisenceInfoReply.Parser, new[]{ "Message", "Statues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routeguide.LisenceInfoRequest), global::Routeguide.LisenceInfoRequest.Parser, new[]{ "ClientLicense" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A RouteNote is a message sent while at a given point.
  /// </summary>
  public sealed partial class RouteNote : pb::IMessage<RouteNote> {
    private static readonly pb::MessageParser<RouteNote> _parser = new pb::MessageParser<RouteNote>(() => new RouteNote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteNote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteNote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteNote(RouteNote other) : this() {
      datasend_ = other.datasend_;
      size_ = other.size_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteNote Clone() {
      return new RouteNote(this);
    }

    /// <summary>Field number for the "datasend" field.</summary>
    public const int DatasendFieldNumber = 1;
    private pb::ByteString datasend_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datasend {
      get { return datasend_; }
      set {
        datasend_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteNote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteNote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Datasend != other.Datasend) return false;
      if (Size != other.Size) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Datasend.Length != 0) hash ^= Datasend.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Datasend.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Datasend);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Datasend.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datasend);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteNote other) {
      if (other == null) {
        return;
      }
      if (other.Datasend.Length != 0) {
        Datasend = other.Datasend;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Datasend = input.ReadBytes();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A RouteNote is a message sent while at a given point.
  /// </summary>
  public sealed partial class TempletFileRequest : pb::IMessage<TempletFileRequest> {
    private static readonly pb::MessageParser<TempletFileRequest> _parser = new pb::MessageParser<TempletFileRequest>(() => new TempletFileRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TempletFileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempletFileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempletFileRequest(TempletFileRequest other) : this() {
      datasend_ = other.datasend_;
      size_ = other.size_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempletFileRequest Clone() {
      return new TempletFileRequest(this);
    }

    /// <summary>Field number for the "datasend" field.</summary>
    public const int DatasendFieldNumber = 1;
    private pb::ByteString datasend_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datasend {
      get { return datasend_; }
      set {
        datasend_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TempletFileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TempletFileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Datasend != other.Datasend) return false;
      if (Size != other.Size) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Datasend.Length != 0) hash ^= Datasend.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Datasend.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Datasend);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Datasend.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datasend);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TempletFileRequest other) {
      if (other == null) {
        return;
      }
      if (other.Datasend.Length != 0) {
        Datasend = other.Datasend;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Datasend = input.ReadBytes();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A RouteNote is a message sent while at a given point.
  /// </summary>
  public sealed partial class TempletFileReply : pb::IMessage<TempletFileReply> {
    private static readonly pb::MessageParser<TempletFileReply> _parser = new pb::MessageParser<TempletFileReply>(() => new TempletFileReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TempletFileReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempletFileReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempletFileReply(TempletFileReply other) : this() {
      retsts_ = other.retsts_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TempletFileReply Clone() {
      return new TempletFileReply(this);
    }

    /// <summary>Field number for the "retsts" field.</summary>
    public const int RetstsFieldNumber = 1;
    private bool retsts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Retsts {
      get { return retsts_; }
      set {
        retsts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TempletFileReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TempletFileReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Retsts != other.Retsts) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Retsts != false) hash ^= Retsts.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Retsts != false) {
        output.WriteRawTag(8);
        output.WriteBool(Retsts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Retsts != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TempletFileReply other) {
      if (other == null) {
        return;
      }
      if (other.Retsts != false) {
        Retsts = other.Retsts;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Retsts = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A RouteNote is a message sent while at a given point.
  /// </summary>
  public sealed partial class IcpMaxIterationsRequest : pb::IMessage<IcpMaxIterationsRequest> {
    private static readonly pb::MessageParser<IcpMaxIterationsRequest> _parser = new pb::MessageParser<IcpMaxIterationsRequest>(() => new IcpMaxIterationsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IcpMaxIterationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcpMaxIterationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcpMaxIterationsRequest(IcpMaxIterationsRequest other) : this() {
      maxiterations_ = other.maxiterations_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcpMaxIterationsRequest Clone() {
      return new IcpMaxIterationsRequest(this);
    }

    /// <summary>Field number for the "maxiterations" field.</summary>
    public const int MaxiterationsFieldNumber = 1;
    private int maxiterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxiterations {
      get { return maxiterations_; }
      set {
        maxiterations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IcpMaxIterationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IcpMaxIterationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Maxiterations != other.Maxiterations) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Maxiterations != 0) hash ^= Maxiterations.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Maxiterations != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Maxiterations);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Maxiterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxiterations);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IcpMaxIterationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Maxiterations != 0) {
        Maxiterations = other.Maxiterations;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Maxiterations = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A RouteNote is a message sent while at a given point.
  /// </summary>
  public sealed partial class IcpMaxIterationsReply : pb::IMessage<IcpMaxIterationsReply> {
    private static readonly pb::MessageParser<IcpMaxIterationsReply> _parser = new pb::MessageParser<IcpMaxIterationsReply>(() => new IcpMaxIterationsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IcpMaxIterationsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcpMaxIterationsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcpMaxIterationsReply(IcpMaxIterationsReply other) : this() {
      retsts_ = other.retsts_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcpMaxIterationsReply Clone() {
      return new IcpMaxIterationsReply(this);
    }

    /// <summary>Field number for the "retsts" field.</summary>
    public const int RetstsFieldNumber = 1;
    private bool retsts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Retsts {
      get { return retsts_; }
      set {
        retsts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IcpMaxIterationsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IcpMaxIterationsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Retsts != other.Retsts) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Retsts != false) hash ^= Retsts.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Retsts != false) {
        output.WriteRawTag(8);
        output.WriteBool(Retsts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Retsts != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IcpMaxIterationsReply other) {
      if (other == null) {
        return;
      }
      if (other.Retsts != false) {
        Retsts = other.Retsts;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Retsts = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Read Server information
  /// </summary>
  public sealed partial class ServerInfoReply : pb::IMessage<ServerInfoReply> {
    private static readonly pb::MessageParser<ServerInfoReply> _parser = new pb::MessageParser<ServerInfoReply>(() => new ServerInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReply(ServerInfoReply other) : this() {
      revsion_ = other.revsion_;
      builddate_ = other.builddate_;
      complayname_ = other.complayname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReply Clone() {
      return new ServerInfoReply(this);
    }

    /// <summary>Field number for the "revsion" field.</summary>
    public const int RevsionFieldNumber = 1;
    private string revsion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Revsion {
      get { return revsion_; }
      set {
        revsion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "builddate" field.</summary>
    public const int BuilddateFieldNumber = 2;
    private string builddate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Builddate {
      get { return builddate_; }
      set {
        builddate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "complayname" field.</summary>
    public const int ComplaynameFieldNumber = 3;
    private string complayname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Complayname {
      get { return complayname_; }
      set {
        complayname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Revsion != other.Revsion) return false;
      if (Builddate != other.Builddate) return false;
      if (Complayname != other.Complayname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Revsion.Length != 0) hash ^= Revsion.GetHashCode();
      if (Builddate.Length != 0) hash ^= Builddate.GetHashCode();
      if (Complayname.Length != 0) hash ^= Complayname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Revsion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Revsion);
      }
      if (Builddate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Builddate);
      }
      if (Complayname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Complayname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Revsion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Revsion);
      }
      if (Builddate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Builddate);
      }
      if (Complayname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Complayname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Revsion.Length != 0) {
        Revsion = other.Revsion;
      }
      if (other.Builddate.Length != 0) {
        Builddate = other.Builddate;
      }
      if (other.Complayname.Length != 0) {
        Complayname = other.Complayname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Revsion = input.ReadString();
            break;
          }
          case 18: {
            Builddate = input.ReadString();
            break;
          }
          case 26: {
            Complayname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfoRequest : pb::IMessage<ServerInfoRequest> {
    private static readonly pb::MessageParser<ServerInfoRequest> _parser = new pb::MessageParser<ServerInfoRequest>(() => new ServerInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoRequest(ServerInfoRequest other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoRequest Clone() {
      return new ServerInfoRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Check Client license
  /// </summary>
  public sealed partial class LisenceInfoReply : pb::IMessage<LisenceInfoReply> {
    private static readonly pb::MessageParser<LisenceInfoReply> _parser = new pb::MessageParser<LisenceInfoReply>(() => new LisenceInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LisenceInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LisenceInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LisenceInfoReply(LisenceInfoReply other) : this() {
      message_ = other.message_;
      statues_ = other.statues_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LisenceInfoReply Clone() {
      return new LisenceInfoReply(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "statues" field.</summary>
    public const int StatuesFieldNumber = 2;
    private bool statues_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Statues {
      get { return statues_; }
      set {
        statues_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LisenceInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LisenceInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (Statues != other.Statues) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Statues != false) hash ^= Statues.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (Statues != false) {
        output.WriteRawTag(16);
        output.WriteBool(Statues);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Statues != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LisenceInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Statues != false) {
        Statues = other.Statues;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 16: {
            Statues = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LisenceInfoRequest : pb::IMessage<LisenceInfoRequest> {
    private static readonly pb::MessageParser<LisenceInfoRequest> _parser = new pb::MessageParser<LisenceInfoRequest>(() => new LisenceInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LisenceInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LisenceInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LisenceInfoRequest(LisenceInfoRequest other) : this() {
      clientLicense_ = other.clientLicense_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LisenceInfoRequest Clone() {
      return new LisenceInfoRequest(this);
    }

    /// <summary>Field number for the "clientLicense" field.</summary>
    public const int ClientLicenseFieldNumber = 1;
    private string clientLicense_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientLicense {
      get { return clientLicense_; }
      set {
        clientLicense_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LisenceInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LisenceInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientLicense != other.ClientLicense) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientLicense.Length != 0) hash ^= ClientLicense.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientLicense.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientLicense);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientLicense.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientLicense);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LisenceInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientLicense.Length != 0) {
        ClientLicense = other.ClientLicense;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClientLicense = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

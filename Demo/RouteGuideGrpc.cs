// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: route_guide.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Routeguide {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class RouteGuide
  {
    static readonly string __ServiceName = "routeguide.RouteGuide";

    static readonly grpc::Marshaller<global::Routeguide.RouteNote> __Marshaller_routeguide_RouteNote = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.RouteNote.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.TempletFileRequest> __Marshaller_routeguide_TempletFileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.TempletFileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.TempletFileReply> __Marshaller_routeguide_TempletFileReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.TempletFileReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.IcpMaxIterationsRequest> __Marshaller_routeguide_IcpMaxIterationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.IcpMaxIterationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.IcpMaxIterationsReply> __Marshaller_routeguide_IcpMaxIterationsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.IcpMaxIterationsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.ServerInfoRequest> __Marshaller_routeguide_ServerInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.ServerInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.ServerInfoReply> __Marshaller_routeguide_ServerInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.ServerInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.LisenceInfoRequest> __Marshaller_routeguide_LisenceInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.LisenceInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Routeguide.LisenceInfoReply> __Marshaller_routeguide_LisenceInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Routeguide.LisenceInfoReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Routeguide.RouteNote, global::Routeguide.RouteNote> __Method_RouteChat = new grpc::Method<global::Routeguide.RouteNote, global::Routeguide.RouteNote>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "RouteChat",
        __Marshaller_routeguide_RouteNote,
        __Marshaller_routeguide_RouteNote);

    static readonly grpc::Method<global::Routeguide.TempletFileRequest, global::Routeguide.TempletFileReply> __Method_SetIcpTemplet = new grpc::Method<global::Routeguide.TempletFileRequest, global::Routeguide.TempletFileReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SetIcpTemplet",
        __Marshaller_routeguide_TempletFileRequest,
        __Marshaller_routeguide_TempletFileReply);

    static readonly grpc::Method<global::Routeguide.IcpMaxIterationsRequest, global::Routeguide.IcpMaxIterationsReply> __Method_SetIcpMaxIterations = new grpc::Method<global::Routeguide.IcpMaxIterationsRequest, global::Routeguide.IcpMaxIterationsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIcpMaxIterations",
        __Marshaller_routeguide_IcpMaxIterationsRequest,
        __Marshaller_routeguide_IcpMaxIterationsReply);

    static readonly grpc::Method<global::Routeguide.ServerInfoRequest, global::Routeguide.ServerInfoReply> __Method_CheckServer = new grpc::Method<global::Routeguide.ServerInfoRequest, global::Routeguide.ServerInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckServer",
        __Marshaller_routeguide_ServerInfoRequest,
        __Marshaller_routeguide_ServerInfoReply);

    static readonly grpc::Method<global::Routeguide.LisenceInfoRequest, global::Routeguide.LisenceInfoReply> __Method_CheckLisence = new grpc::Method<global::Routeguide.LisenceInfoRequest, global::Routeguide.LisenceInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckLisence",
        __Marshaller_routeguide_LisenceInfoRequest,
        __Marshaller_routeguide_LisenceInfoReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Routeguide.RouteGuideReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RouteGuide</summary>
    public abstract partial class RouteGuideBase
    {
      /// <summary>
      /// A Bidirectional streaming RPC.
      ///
      /// Accepts a stream of RouteNotes sent while a route is being traversed,
      /// while receiving other RouteNotes (e.g. from other users).
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task RouteChat(grpc::IAsyncStreamReader<global::Routeguide.RouteNote> requestStream, grpc::IServerStreamWriter<global::Routeguide.RouteNote> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// *****************ICP function start************************
      ///Get templet file from Client
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Routeguide.TempletFileReply> SetIcpTemplet(grpc::IAsyncStreamReader<global::Routeguide.TempletFileRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///set MaximumIterations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Routeguide.IcpMaxIterationsReply> SetIcpMaxIterations(global::Routeguide.IcpMaxIterationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Routeguide.ServerInfoReply> CheckServer(global::Routeguide.ServerInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Routeguide.LisenceInfoReply> CheckLisence(global::Routeguide.LisenceInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RouteGuide</summary>
    public partial class RouteGuideClient : grpc::ClientBase<RouteGuideClient>
    {
      /// <summary>Creates a new client for RouteGuide</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RouteGuideClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RouteGuide that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RouteGuideClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RouteGuideClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RouteGuideClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// A Bidirectional streaming RPC.
      ///
      /// Accepts a stream of RouteNotes sent while a route is being traversed,
      /// while receiving other RouteNotes (e.g. from other users).
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Routeguide.RouteNote, global::Routeguide.RouteNote> RouteChat(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RouteChat(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A Bidirectional streaming RPC.
      ///
      /// Accepts a stream of RouteNotes sent while a route is being traversed,
      /// while receiving other RouteNotes (e.g. from other users).
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Routeguide.RouteNote, global::Routeguide.RouteNote> RouteChat(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_RouteChat, null, options);
      }
      /// <summary>
      /// *****************ICP function start************************
      ///Get templet file from Client
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Routeguide.TempletFileRequest, global::Routeguide.TempletFileReply> SetIcpTemplet(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIcpTemplet(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// *****************ICP function start************************
      ///Get templet file from Client
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Routeguide.TempletFileRequest, global::Routeguide.TempletFileReply> SetIcpTemplet(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SetIcpTemplet, null, options);
      }
      /// <summary>
      ///set MaximumIterations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Routeguide.IcpMaxIterationsReply SetIcpMaxIterations(global::Routeguide.IcpMaxIterationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIcpMaxIterations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///set MaximumIterations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Routeguide.IcpMaxIterationsReply SetIcpMaxIterations(global::Routeguide.IcpMaxIterationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIcpMaxIterations, null, options, request);
      }
      /// <summary>
      ///set MaximumIterations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Routeguide.IcpMaxIterationsReply> SetIcpMaxIterationsAsync(global::Routeguide.IcpMaxIterationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIcpMaxIterationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///set MaximumIterations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Routeguide.IcpMaxIterationsReply> SetIcpMaxIterationsAsync(global::Routeguide.IcpMaxIterationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIcpMaxIterations, null, options, request);
      }
      public virtual global::Routeguide.ServerInfoReply CheckServer(global::Routeguide.ServerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Routeguide.ServerInfoReply CheckServer(global::Routeguide.ServerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckServer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Routeguide.ServerInfoReply> CheckServerAsync(global::Routeguide.ServerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Routeguide.ServerInfoReply> CheckServerAsync(global::Routeguide.ServerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckServer, null, options, request);
      }
      public virtual global::Routeguide.LisenceInfoReply CheckLisence(global::Routeguide.LisenceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckLisence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Routeguide.LisenceInfoReply CheckLisence(global::Routeguide.LisenceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckLisence, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Routeguide.LisenceInfoReply> CheckLisenceAsync(global::Routeguide.LisenceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckLisenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Routeguide.LisenceInfoReply> CheckLisenceAsync(global::Routeguide.LisenceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckLisence, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RouteGuideClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RouteGuideClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RouteGuideBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RouteChat, serviceImpl.RouteChat)
          .AddMethod(__Method_SetIcpTemplet, serviceImpl.SetIcpTemplet)
          .AddMethod(__Method_SetIcpMaxIterations, serviceImpl.SetIcpMaxIterations)
          .AddMethod(__Method_CheckServer, serviceImpl.CheckServer)
          .AddMethod(__Method_CheckLisence, serviceImpl.CheckLisence).Build();
    }

  }
}
#endregion
